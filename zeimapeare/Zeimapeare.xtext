grammar zeimapeare.Zeimapeare with org.eclipse.xtext.common.Terminals

generate zeimapeare "http://www.Zeimapeare.zeimapeare"

Program:
	title= TitleOfScript
	
	prologue= Prologue
	
	(acts+=Act)+
;

TitleOfScript:
	name=ID
;

Prologue:
	'PROLOGUE'
	'Wordsmith: Welcome to the theater, lets give an applause to our cast' 
	(actors += ActorDeclaration',')*
	actors += ActorDeclaration'.'

	initials+=InitialAssigment*
;

ActorDeclaration: 
	name=ID 'is a member of' datatype = DataType 'family'
;

ActorExtraParameter returns ActorDeclaration:
	'[Enter' name=ID 'from' datatype = DataType 'family]'
;

InitialAssigment returns Assigment:
	actor=[ActorDeclaration] ': I am' expression = Expression
;

Operation:
	operations=('the love' | 'the hostility' | 'the abundance' | 'the dismemberment' | 'the leftovers' | 'M-m-maybe next time...' | 'or' | 'merge or dreams' | 'inmensity')
;


ActorExpression:
	actor= [ActorDeclaration]
;

ComplexIntExpression:
	(operation= Operation 'of' exp1=IntExpression 'and' exp2=IntExpression)
;

IntExpression:
	ComplexIntExpression | Value | ActorExpression
;

Number:
	number=INT
;

Value:
	Number | ValueSustantive
;

Expression:
	IntExpression
;

RomanNumber:
     romanNumber= ('I' | 'II' | 'III' | 'IV' | 'V' | 'VI' | 'VII' | 'VIII' | 'IX' | 'X')
;

Act:
	'ACT' romanNumber=RomanNumber
	(scene+=Scene)+
;

DataType:
	('Capulet' | 'Montague' | 'Slave')
;

ActorParameter:
	'[Enter' name=[ActorDeclaration]']'
;

Scene:
	'Scene' romanNumber=RomanNumber ':' name = STRING
	actorScene=ActorScene
	(instructions+=Instructions)*
	(sceneCall+=SceneCall)*
;

ActorScene:
	(actors+= ActorParameter)*
	(actorsExtra+= ActorExtraParameter)*
;

//Assigment:
//	actor=[ActorDeclaration] ':' ( 'I am ' | 'She is' | 'He is' | 'You are')  expression = Expression
//;

Assigment:
	actor=[ActorDeclaration] ': You are'    expression = Expression
;

Instructions:
	Assigment | Output | If | Return
;

ValueSustantive:
	'a' adj=Adjective? sustantive=Sustantive 
;

Sustantive:
	sustantive= (STRING | 'nothing')
;

Adjective:
	adjectives+=('good')(',' adjectives+=('good'))*
;

Output:
	actor=[ActorDeclaration]': Gossip about your secrets'
;

Return:
	actor=[ActorDeclaration]': I come back'
;
//TODO: Preguntar a Alexis
// Sin los espacios no sirve :(
Comparison:
	'better ' | 'worse' | 'better or equal' | 'worse or equal'
;

ParameterSceneCall:
	(actorsExtra+=([ActorDeclaration])(', ' actorsExtra+=[ActorDeclaration])*)
;

SceneCall:
	'Wordsmith: We need to remember the ' sceneCall=[Scene] ('of ' parameterSceneCall=ParameterSceneCall)? '.'
;

If:
	'Wordsmith: If' exp1=Expression 'is ' comp=Comparison 'than' exp2=Expression
	(instructions+=Instructions)*
	'Wordsmith: Will it continue?'
	else=Else?
;

Else:
	{Else} 'Wordsmith: Unless?'
	(instructions+=Instructions)*
	'Wordsmith: Will it continue?'
;

//While:
//	'Narrator: To be, or not to be, that is the query'
//	'Whether 'actor=[ActorDeclaration] 
//;
