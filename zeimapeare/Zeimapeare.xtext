grammar zeimapeare.Zeimapeare with org.eclipse.xtext.common.Terminals

generate zeimapeare "http://www.Zeimapeare.zeimapeare"

Program:
	title= TitleOfScript
	
	prologue= Prologue
	
	(acts+=Act)+
;

TitleOfScript:
	name=ID
;

//Main()

Prologue:
	'PROLOGUE'
	'Wordsmith: Welcome to the theater, lets give an applause to our cast' 
	(actors += ActorDeclaration',')*
	actors += ActorDeclaration'.'

	initials+=InitialAssigment*
	
	main=SceneCall
;

//Declaration of variables

ActorDeclaration: 
	name=ID 'is a member of' datatype = DataType 'family'
;

ActorExtraParameter returns ActorDeclaration:
	'[Enter' name=ID 'from' datatype = DataType 'family]'
;

//Data types

DataType:
	('Capulet' | 'Montague')
;

//Assignment of variables

Assigment:
	actor=[ActorDeclaration] ': ' assignmentOp=AssignmentOP expression = Expression
;

AssignmentOP:
	subjects=('She is' | 'He is' | 'You are')
;

InitialAssigment returns Assigment:
	actor=[ActorDeclaration] ': I am' expression = Expression
;

//Expression

Expression:
	IntExpression | StringExpression | ActorExpression
;

//INT Expressions and operations

IntExpression:
	ComplexIntExpression | Value 
;

ComplexIntExpression:
	(operation= Operation 'of ' exp1=Expression 'and' exp2=Expression)
;

Operation:
	operations=('the love' | 'the hostility' | 'the abundance' | 'the dismemberment' | 'the leftovers')
;

Value:
	Number | ValueSustantive
;

Number:
	number=INT
;

ValueSustantive:
	'a' adj=Adjective? sustantive=Sustantive 
;

Sustantive:
	sustantive= (ListOfSustantives | 'nothing')
;

ListOfSustantives:
	('ambition' | 'honor' | 'deception' | 'power' | 'destiny' | 'fortune' | 'sacrifice' | 'justice')
;

Adjective:
	adjectives+=(ListOfAdjectives)(',' adjectives+=(ListOfAdjectives))*
;

ListOfAdjectives:
	('dramatic' | 'poetic' | 'romantic' | 'tragic' | 'majestic' | 'magical' | 'lyrical')
;

//STRING Expressions and operators

StringExpression:
	ComplexStringExpression | ValueString
;

ComplexStringExpression:
	'merge or dreams' exp1=Expression 'and' exp2=Expression
;

ValueString:
	value=STRING
;

//Actor Expression

ActorExpression:
	actor= [ActorDeclaration]
;

//Function calls

SceneCall:
	'Wordsmith: We need to remember the ' sceneCall=[Scene] ('of ' parameterSceneCall=ParameterSceneCall)? '.'
;

ActorSceneCall:
	'( ' actor=[ActorDeclaration] 'remembered that happened in the' sceneCall=[Scene] ('about ' parameterSceneCall=ParameterSceneCall)? ' )'
;

ParameterSceneCall:
	(actorsExtra+=([ActorDeclaration])(', ' actorsExtra+=[ActorDeclaration])*)
;

//Act

Act:
	'ACT' romanNumber=RomanNumber
	(scene+=Scene)+
;

//Functions

Scene:
	'Scene' romanNumber=RomanNumber ': ' name = ID
	actorScene=ActorScene
	(instructions+=Instructions)*
;

RomanNumber:
     romanNumber=('I' | 'II' | 'III' | 'IV' | 'V' | 'VI' | 'VII' | 'VIII' | 'IX' | 'X')
;

//Parameters of functions

ActorScene:
	{ActorScene} (actors+= ActorParameter)*
	(actorsExtra+= ActorExtraParameter)*
;

ActorParameter:
	'[Enter' name=[ActorDeclaration]']'
;

//Instructions

Instructions:
	Assigment | Output | If | SceneCall | ActorSceneCall | Return | While
;

//Console.log

Output:
	actor=[ActorDeclaration]': Gossip about your secrets'
;

//Return

Return:
	actor=[ActorDeclaration]': I will come back'
;

//If

If:
	'Wordsmith: If' condition=ComplexCondition
	(instructions+=Instructions)*
	'Wordsmith: Will it continue?'
	else=Else?
;

ComplexCondition:
	cond1= Condition ( op=BooleanOperation cond2=ComplexCondition)?
;

Condition:
	exp1=Expression 'is ' comp=Comparison 'than' exp2=Expression
;

BooleanOperation:
	('otherwise' | 'M-m-maybe next time...')
;

Comparison:
	(('better' | 'worse') ('or equal')?) | 'equal' | 'different'
;

Else:
	{Else} 'Wordsmith: Unless?'
	(instructions+=Instructions)*
	'Wordsmith: Will it continue?'
;

//While

While:
	'Wordsmith: To be, or not to be, that is the query'
	'Whether' condition= ComplexCondition 
	(instructions+= Instructions)*
	'Wordsmith: The end?'
;

